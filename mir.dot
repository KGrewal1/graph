digraph __crate__ {
subgraph cluster_Mir_0_27 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn &lt;SimpleGraph&lt;T, U&gt; as Default&gt;::default() -&gt; SimpleGraph&lt;T, U&gt;<br align="left"/>>;
    bb0__0_27 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left">_0 = SimpleGraph::&lt;T, U&gt;::new()</td></tr></table>>];
    bb1__0_27 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_27 -> bb1__0_27 [label="return"];
}
subgraph cluster_Mir_0_61 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn SimpleGraph::&lt;T, U&gt;::new() -&gt; SimpleGraph&lt;T, U&gt;<br align="left"/>let mut _1: std::vec::Vec&lt;std::option::Option&lt;std::ptr::NonNull&lt;Node&lt;T, U&gt;&gt;&gt;&gt;;<br align="left"/>let mut _2: std::vec::Vec&lt;std::option::Option&lt;std::ptr::NonNull&lt;Edge&lt;T, U&gt;&gt;&gt;&gt;;<br align="left"/>>;
    bb0__0_61 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left">_1 = Vec::&lt;Option&lt;NonNull&lt;Node&lt;T, U&gt;&gt;&gt;&gt;::new()</td></tr></table>>];
    bb1__0_61 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left">_2 = Vec::&lt;Option&lt;NonNull&lt;Edge&lt;T, U&gt;&gt;&gt;&gt;::new()</td></tr></table>>];
    bb2__0_61 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">_0 = SimpleGraph::&lt;T, U&gt; { nodes: move _1, edges: move _2, _node_type: const ZeroSized: PhantomData&lt;T&gt;, _edge_type: const ZeroSized: PhantomData&lt;T&gt; }<br/></td></tr><tr><td align="left">return</td></tr></table>>];
    bb3__0_61 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">3 (cleanup)</td></tr><tr><td align="left">drop(_1)</td></tr></table>>];
    bb4__0_61 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">4 (cleanup)</td></tr><tr><td align="left">resume</td></tr></table>>];
    bb0__0_61 -> bb1__0_61 [label="return"];
    bb1__0_61 -> bb2__0_61 [label="return"];
    bb1__0_61 -> bb3__0_61 [label="unwind"];
    bb3__0_61 -> bb4__0_61 [label="return"];
}
subgraph cluster_Mir_0_62 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn SimpleGraph::&lt;T, U&gt;::from_nodes(_1: V) -&gt; SimpleGraph&lt;T, U&gt;<br align="left"/>let mut _2: std::vec::Vec&lt;std::option::Option&lt;std::ptr::NonNull&lt;Node&lt;T, U&gt;&gt;&gt;&gt;;<br align="left"/>let mut _3: std::iter::Map&lt;&lt;V as std::iter::IntoIterator&gt;::IntoIter, [closure@src/lib.rs:79:22: 79:25]&gt;;<br align="left"/>let mut _4: &lt;V as std::iter::IntoIterator&gt;::IntoIter;<br align="left"/>let mut _5: std::vec::Vec&lt;std::option::Option&lt;std::ptr::NonNull&lt;Edge&lt;T, U&gt;&gt;&gt;&gt;;<br align="left"/>debug nodes =&gt; _1;<br align="left"/>>;
    bb0__0_62 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left">_4 = &lt;V as IntoIterator&gt;::into_iter(move _1)</td></tr></table>>];
    bb1__0_62 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left">_3 = &lt;&lt;V as IntoIterator&gt;::IntoIter as Iterator&gt;::map::&lt;Option&lt;NonNull&lt;Node&lt;T, U&gt;&gt;&gt;, [closure@src/lib.rs:79:22: 79:25]&gt;(move _4, const ZeroSized: [closure@src/lib.rs:79:22: 79:25])</td></tr></table>>];
    bb2__0_62 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left">_2 = &lt;Map&lt;&lt;V as IntoIterator&gt;::IntoIter, [closure@src/lib.rs:79:22: 79:25]&gt; as Iterator&gt;::collect::&lt;Vec&lt;Option&lt;NonNull&lt;Node&lt;T, U&gt;&gt;&gt;&gt;&gt;(move _3)</td></tr></table>>];
    bb3__0_62 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left">_5 = Vec::&lt;Option&lt;NonNull&lt;Edge&lt;T, U&gt;&gt;&gt;&gt;::new()</td></tr></table>>];
    bb4__0_62 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">_0 = SimpleGraph::&lt;T, U&gt; { nodes: move _2, edges: move _5, _node_type: const ZeroSized: PhantomData&lt;T&gt;, _edge_type: const ZeroSized: PhantomData&lt;T&gt; }<br/></td></tr><tr><td align="left">return</td></tr></table>>];
    bb5__0_62 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">5 (cleanup)</td></tr><tr><td align="left">drop(_2)</td></tr></table>>];
    bb6__0_62 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">6 (cleanup)</td></tr><tr><td align="left">resume</td></tr></table>>];
    bb0__0_62 -> bb1__0_62 [label="return"];
    bb1__0_62 -> bb2__0_62 [label="return"];
    bb2__0_62 -> bb3__0_62 [label="return"];
    bb3__0_62 -> bb4__0_62 [label="return"];
    bb3__0_62 -> bb5__0_62 [label="unwind"];
    bb5__0_62 -> bb6__0_62 [label="return"];
}
subgraph cluster_Mir_0_64 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn SimpleGraph::&lt;T, U&gt;::from_nodes::{closure#0}(_1: &amp;mut [closure@src/lib.rs:79:22: 79:25], _2: T) -&gt; std::option::Option&lt;std::ptr::NonNull&lt;Node&lt;T, U&gt;&gt;&gt;<br align="left"/>let mut _3: std::ptr::NonNull&lt;Node&lt;T, U&gt;&gt;;<br align="left"/>let mut _4: *mut Node&lt;T, U&gt;;<br align="left"/>let mut _5: std::boxed::Box&lt;Node&lt;T, U&gt;&gt;;<br align="left"/>let mut _6: Node&lt;T, U&gt;;<br align="left"/>let mut _7: T;<br align="left"/>let mut _8: std::vec::Vec&lt;std::option::Option&lt;std::ptr::NonNull&lt;Edge&lt;T, U&gt;&gt;&gt;&gt;;<br align="left"/>debug n =&gt; _2;<br align="left"/>>;
    bb0__0_64 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">_7 = move _2<br/></td></tr><tr><td align="left">_8 = Vec::&lt;Option&lt;NonNull&lt;Edge&lt;T, U&gt;&gt;&gt;&gt;::new()</td></tr></table>>];
    bb1__0_64 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">_6 = Node::&lt;T, U&gt; { elem: move _7, connections: move _8 }<br/></td></tr><tr><td align="left">_5 = Box::&lt;Node&lt;T, U&gt;&gt;::new(move _6)</td></tr></table>>];
    bb2__0_64 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left">_4 = Box::&lt;Node&lt;T, U&gt;&gt;::into_raw(move _5)</td></tr></table>>];
    bb3__0_64 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left">_3 = NonNull::&lt;Node&lt;T, U&gt;&gt;::new_unchecked(move _4)</td></tr></table>>];
    bb4__0_64 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">_0 = Option::&lt;NonNull&lt;Node&lt;T, U&gt;&gt;&gt;::Some(move _3)<br/></td></tr><tr><td align="left">return</td></tr></table>>];
    bb5__0_64 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">5 (cleanup)</td></tr><tr><td align="left">drop(_7)</td></tr></table>>];
    bb6__0_64 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">6 (cleanup)</td></tr><tr><td align="left">resume</td></tr></table>>];
    bb0__0_64 -> bb1__0_64 [label="return"];
    bb0__0_64 -> bb5__0_64 [label="unwind"];
    bb1__0_64 -> bb2__0_64 [label="return"];
    bb2__0_64 -> bb3__0_64 [label="return"];
    bb3__0_64 -> bb4__0_64 [label="return"];
    bb5__0_64 -> bb6__0_64 [label="return"];
}
subgraph cluster_Mir_0_65 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn SimpleGraph::&lt;T, U&gt;::add_edge(_1: &amp;mut SimpleGraph&lt;T, U&gt;, _2: U, _3: usize, _4: usize) -&gt; std::result::Result&lt;(), EdgeError&gt;<br align="left"/>let mut _5: bool;<br align="left"/>let mut _6: EdgeError;<br align="left"/>let _7: std::option::Option&lt;std::ptr::NonNull&lt;Node&lt;T, U&gt;&gt;&gt;;<br align="left"/>let mut _8: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, EdgeError&gt;, &amp;std::option::Option&lt;std::ptr::NonNull&lt;Node&lt;T, U&gt;&gt;&gt;&gt;;<br align="left"/>let mut _9: std::result::Result&lt;&amp;std::option::Option&lt;std::ptr::NonNull&lt;Node&lt;T, U&gt;&gt;&gt;, EdgeError&gt;;<br align="left"/>let mut _10: std::option::Option&lt;&amp;std::option::Option&lt;std::ptr::NonNull&lt;Node&lt;T, U&gt;&gt;&gt;&gt;;<br align="left"/>let mut _11: &amp;[std::option::Option&lt;std::ptr::NonNull&lt;Node&lt;T, U&gt;&gt;&gt;];<br align="left"/>let _12: &amp;[std::option::Option&lt;std::ptr::NonNull&lt;Node&lt;T, U&gt;&gt;&gt;];<br align="left"/>let mut _13: &amp;std::vec::Vec&lt;std::option::Option&lt;std::ptr::NonNull&lt;Node&lt;T, U&gt;&gt;&gt;&gt;;<br align="left"/>let mut _14: EdgeError;<br align="left"/>let mut _15: isize;<br align="left"/>let _16: std::result::Result&lt;std::convert::Infallible, EdgeError&gt;;<br align="left"/>let _17: &amp;std::option::Option&lt;std::ptr::NonNull&lt;Node&lt;T, U&gt;&gt;&gt;;<br align="left"/>let _18: std::option::Option&lt;std::ptr::NonNull&lt;Node&lt;T, U&gt;&gt;&gt;;<br align="left"/>let mut _19: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, EdgeError&gt;, &amp;std::option::Option&lt;std::ptr::NonNull&lt;Node&lt;T, U&gt;&gt;&gt;&gt;;<br align="left"/>let mut _20: std::result::Result&lt;&amp;std::option::Option&lt;std::ptr::NonNull&lt;Node&lt;T, U&gt;&gt;&gt;, EdgeError&gt;;<br align="left"/>let mut _21: std::option::Option&lt;&amp;std::option::Option&lt;std::ptr::NonNull&lt;Node&lt;T, U&gt;&gt;&gt;&gt;;<br align="left"/>let mut _22: &amp;[std::option::Option&lt;std::ptr::NonNull&lt;Node&lt;T, U&gt;&gt;&gt;];<br align="left"/>let _23: &amp;[std::option::Option&lt;std::ptr::NonNull&lt;Node&lt;T, U&gt;&gt;&gt;];<br align="left"/>let mut _24: &amp;std::vec::Vec&lt;std::option::Option&lt;std::ptr::NonNull&lt;Node&lt;T, U&gt;&gt;&gt;&gt;;<br align="left"/>let mut _25: EdgeError;<br align="left"/>let mut _26: isize;<br align="left"/>let _27: std::result::Result&lt;std::convert::Infallible, EdgeError&gt;;<br align="left"/>let _28: &amp;std::option::Option&lt;std::ptr::NonNull&lt;Node&lt;T, U&gt;&gt;&gt;;<br align="left"/>let _29: Edge&lt;T, U&gt;;<br align="left"/>let mut _30: U;<br align="left"/>let _31: std::option::Option&lt;std::ptr::NonNull&lt;Edge&lt;T, U&gt;&gt;&gt;;<br align="left"/>let mut _32: std::ptr::NonNull&lt;Edge&lt;T, U&gt;&gt;;<br align="left"/>let mut _33: *mut Edge&lt;T, U&gt;;<br align="left"/>let mut _34: std::boxed::Box&lt;Edge&lt;T, U&gt;&gt;;<br align="left"/>let _35: ();<br align="left"/>let mut _36: &amp;mut std::vec::Vec&lt;std::option::Option&lt;std::ptr::NonNull&lt;Edge&lt;T, U&gt;&gt;&gt;&gt;;<br align="left"/>let mut _37: (std::option::Option&lt;std::ptr::NonNull&lt;Node&lt;T, U&gt;&gt;&gt;, std::option::Option&lt;std::ptr::NonNull&lt;Node&lt;T, U&gt;&gt;&gt;);<br align="left"/>let mut _38: isize;<br align="left"/>let mut _39: isize;<br align="left"/>let mut _40: std::ptr::NonNull&lt;Node&lt;T, U&gt;&gt;;<br align="left"/>let mut _41: std::ptr::NonNull&lt;Node&lt;T, U&gt;&gt;;<br align="left"/>let _42: &amp;mut Node&lt;T, U&gt;;<br align="left"/>let mut _43: &amp;mut Node&lt;T, U&gt;;<br align="left"/>let mut _44: &amp;mut std::ptr::NonNull&lt;Node&lt;T, U&gt;&gt;;<br align="left"/>let _45: &amp;mut Node&lt;T, U&gt;;<br align="left"/>let mut _46: &amp;mut Node&lt;T, U&gt;;<br align="left"/>let mut _47: &amp;mut std::ptr::NonNull&lt;Node&lt;T, U&gt;&gt;;<br align="left"/>let _48: ();<br align="left"/>let mut _49: &amp;mut std::vec::Vec&lt;std::option::Option&lt;std::ptr::NonNull&lt;Edge&lt;T, U&gt;&gt;&gt;&gt;;<br align="left"/>let _50: ();<br align="left"/>let mut _51: &amp;mut std::vec::Vec&lt;std::option::Option&lt;std::ptr::NonNull&lt;Edge&lt;T, U&gt;&gt;&gt;&gt;;<br align="left"/>let mut _52: bool;<br align="left"/>debug self =&gt; _1;<br align="left"/>debug edge_value =&gt; _2;<br align="left"/>debug node_1 =&gt; _3;<br align="left"/>debug node_2 =&gt; _4;<br align="left"/>debug n_1 =&gt; _7;<br align="left"/>debug residual =&gt; _16;<br align="left"/>debug val =&gt; _17;<br align="left"/>debug n_2 =&gt; _18;<br align="left"/>debug residual =&gt; _27;<br align="left"/>debug val =&gt; _28;<br align="left"/>debug edge =&gt; _29;<br align="left"/>debug edge_pointer =&gt; _31;<br align="left"/>debug node_1 =&gt; _40;<br align="left"/>debug node_2 =&gt; _41;<br align="left"/>debug node_1 =&gt; _42;<br align="left"/>debug node_2 =&gt; _45;<br align="left"/>>;
    bb0__0_65 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">_52 = const false<br/>_52 = const true<br/>_5 = Eq(_3, _4)<br/></td></tr><tr><td align="left">switchInt(move _5)</td></tr></table>>];
    bb1__0_65 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">_6 = EdgeError::SameNode<br/>_0 = Result::&lt;(), EdgeError&gt;::Err(move _6)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb2__0_65 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb3__0_65 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">_13 = &amp;((*_1).0: std::vec::Vec&lt;std::option::Option&lt;std::ptr::NonNull&lt;Node&lt;T, U&gt;&gt;&gt;&gt;)<br/></td></tr><tr><td align="left">_12 = &lt;Vec&lt;Option&lt;NonNull&lt;Node&lt;T, U&gt;&gt;&gt;&gt; as Deref&gt;::deref(move _13)</td></tr></table>>];
    bb4__0_65 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">_11 = _12<br/></td></tr><tr><td align="left">_10 = core::slice::&lt;impl [Option&lt;NonNull&lt;Node&lt;T, U&gt;&gt;&gt;]&gt;::get::&lt;usize&gt;(move _11, _3)</td></tr></table>>];
    bb5__0_65 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">_14 = EdgeError::NodeOutOfRange<br/></td></tr><tr><td align="left">_9 = Option::&lt;&amp;Option&lt;NonNull&lt;Node&lt;T, U&gt;&gt;&gt;&gt;::ok_or::&lt;EdgeError&gt;(move _10, move _14)</td></tr></table>>];
    bb6__0_65 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left">_8 = &lt;Result&lt;&amp;Option&lt;NonNull&lt;Node&lt;T, U&gt;&gt;&gt;, EdgeError&gt; as Try&gt;::branch(move _9)</td></tr></table>>];
    bb7__0_65 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">_15 = discriminant(_8)<br/></td></tr><tr><td align="left">switchInt(move _15)</td></tr></table>>];
    bb8__0_65 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">_17 = ((_8 as Continue).0: &amp;std::option::Option&lt;std::ptr::NonNull&lt;Node&lt;T, U&gt;&gt;&gt;)<br/>_7 = (*_17)<br/>_24 = &amp;((*_1).0: std::vec::Vec&lt;std::option::Option&lt;std::ptr::NonNull&lt;Node&lt;T, U&gt;&gt;&gt;&gt;)<br/></td></tr><tr><td align="left">_23 = &lt;Vec&lt;Option&lt;NonNull&lt;Node&lt;T, U&gt;&gt;&gt;&gt; as Deref&gt;::deref(move _24)</td></tr></table>>];
    bb9__0_65 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">_16 = move ((_8 as Break).0: std::result::Result&lt;std::convert::Infallible, EdgeError&gt;)<br/></td></tr><tr><td align="left">_0 = &lt;Result&lt;(), EdgeError&gt; as FromResidual&lt;Result&lt;Infallible, EdgeError&gt;&gt;&gt;::from_residual(move _16)</td></tr></table>>];
    bb10__0_65 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">_22 = _23<br/></td></tr><tr><td align="left">_21 = core::slice::&lt;impl [Option&lt;NonNull&lt;Node&lt;T, U&gt;&gt;&gt;]&gt;::get::&lt;usize&gt;(move _22, _4)</td></tr></table>>];
    bb11__0_65 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">_25 = EdgeError::NodeOutOfRange<br/></td></tr><tr><td align="left">_20 = Option::&lt;&amp;Option&lt;NonNull&lt;Node&lt;T, U&gt;&gt;&gt;&gt;::ok_or::&lt;EdgeError&gt;(move _21, move _25)</td></tr></table>>];
    bb12__0_65 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left">_19 = &lt;Result&lt;&amp;Option&lt;NonNull&lt;Node&lt;T, U&gt;&gt;&gt;, EdgeError&gt; as Try&gt;::branch(move _20)</td></tr></table>>];
    bb13__0_65 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">_26 = discriminant(_19)<br/></td></tr><tr><td align="left">switchInt(move _26)</td></tr></table>>];
    bb14__0_65 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">_28 = ((_19 as Continue).0: &amp;std::option::Option&lt;std::ptr::NonNull&lt;Node&lt;T, U&gt;&gt;&gt;)<br/>_18 = (*_28)<br/>_52 = const false<br/>_30 = move _2<br/>_29 = Edge::&lt;T, U&gt; { start: _7, end: _18, value: move _30 }<br/></td></tr><tr><td align="left">_34 = Box::&lt;Edge&lt;T, U&gt;&gt;::new(move _29)</td></tr></table>>];
    bb15__0_65 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left" balign="left">_27 = move ((_19 as Break).0: std::result::Result&lt;std::convert::Infallible, EdgeError&gt;)<br/></td></tr><tr><td align="left">_0 = &lt;Result&lt;(), EdgeError&gt; as FromResidual&lt;Result&lt;Infallible, EdgeError&gt;&gt;&gt;::from_residual(move _27)</td></tr></table>>];
    bb16__0_65 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left">_33 = Box::&lt;Edge&lt;T, U&gt;&gt;::into_raw(move _34)</td></tr></table>>];
    bb17__0_65 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">17</td></tr><tr><td align="left">_32 = NonNull::&lt;Edge&lt;T, U&gt;&gt;::new_unchecked(move _33)</td></tr></table>>];
    bb18__0_65 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">18</td></tr><tr><td align="left" balign="left">_31 = Option::&lt;NonNull&lt;Edge&lt;T, U&gt;&gt;&gt;::Some(move _32)<br/>_36 = &amp;mut ((*_1).1: std::vec::Vec&lt;std::option::Option&lt;std::ptr::NonNull&lt;Edge&lt;T, U&gt;&gt;&gt;&gt;)<br/></td></tr><tr><td align="left">_35 = Vec::&lt;Option&lt;NonNull&lt;Edge&lt;T, U&gt;&gt;&gt;&gt;::push(move _36, _31)</td></tr></table>>];
    bb19__0_65 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">19</td></tr><tr><td align="left" balign="left">_37 = (_7, _18)<br/>_39 = discriminant((_37.0: std::option::Option&lt;std::ptr::NonNull&lt;Node&lt;T, U&gt;&gt;&gt;))<br/></td></tr><tr><td align="left">switchInt(move _39)</td></tr></table>>];
    bb20__0_65 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">20</td></tr><tr><td align="left" balign="left">_38 = discriminant((_37.1: std::option::Option&lt;std::ptr::NonNull&lt;Node&lt;T, U&gt;&gt;&gt;))<br/></td></tr><tr><td align="left">switchInt(move _38)</td></tr></table>>];
    bb21__0_65 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">21</td></tr><tr><td align="left" balign="left">_40 = (((_37.0: std::option::Option&lt;std::ptr::NonNull&lt;Node&lt;T, U&gt;&gt;&gt;) as Some).0: std::ptr::NonNull&lt;Node&lt;T, U&gt;&gt;)<br/>_41 = (((_37.1: std::option::Option&lt;std::ptr::NonNull&lt;Node&lt;T, U&gt;&gt;&gt;) as Some).0: std::ptr::NonNull&lt;Node&lt;T, U&gt;&gt;)<br/>_44 = &amp;mut _40<br/></td></tr><tr><td align="left">_43 = NonNull::&lt;Node&lt;T, U&gt;&gt;::as_mut::&lt;'_&gt;(move _44)</td></tr></table>>];
    bb22__0_65 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">22</td></tr><tr><td align="left" balign="left">_42 = _43<br/>_47 = &amp;mut _41<br/></td></tr><tr><td align="left">_46 = NonNull::&lt;Node&lt;T, U&gt;&gt;::as_mut::&lt;'_&gt;(move _47)</td></tr></table>>];
    bb23__0_65 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">23</td></tr><tr><td align="left" balign="left">_45 = _46<br/>_49 = &amp;mut ((*_42).1: std::vec::Vec&lt;std::option::Option&lt;std::ptr::NonNull&lt;Edge&lt;T, U&gt;&gt;&gt;&gt;)<br/></td></tr><tr><td align="left">_48 = Vec::&lt;Option&lt;NonNull&lt;Edge&lt;T, U&gt;&gt;&gt;&gt;::push(move _49, _31)</td></tr></table>>];
    bb24__0_65 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">24</td></tr><tr><td align="left" balign="left">_51 = &amp;mut ((*_45).1: std::vec::Vec&lt;std::option::Option&lt;std::ptr::NonNull&lt;Edge&lt;T, U&gt;&gt;&gt;&gt;)<br/></td></tr><tr><td align="left">_50 = Vec::&lt;Option&lt;NonNull&lt;Edge&lt;T, U&gt;&gt;&gt;&gt;::push(move _51, _31)</td></tr></table>>];
    bb25__0_65 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">25</td></tr><tr><td align="left" balign="left">_0 = Result::&lt;(), EdgeError&gt;::Ok(const ())<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb26__0_65 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">26</td></tr><tr><td align="left">drop(_2)</td></tr></table>>];
    bb27__0_65 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">27</td></tr><tr><td align="left">return</td></tr></table>>];
    bb28__0_65 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">28 (cleanup)</td></tr><tr><td align="left">resume</td></tr></table>>];
    bb29__0_65 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">29 (cleanup)</td></tr><tr><td align="left">drop(_2)</td></tr></table>>];
    bb30__0_65 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">30 (cleanup)</td></tr><tr><td align="left">switchInt(_52)</td></tr></table>>];
    bb31__0_65 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">31</td></tr><tr><td align="left">goto</td></tr></table>>];
    bb32__0_65 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">32</td></tr><tr><td align="left">goto</td></tr></table>>];
    bb33__0_65 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">33</td></tr><tr><td align="left">goto</td></tr></table>>];
    bb0__0_65 -> bb3__0_65 [label="0"];
    bb0__0_65 -> bb1__0_65 [label="otherwise"];
    bb1__0_65 -> bb26__0_65 [label=""];
    bb3__0_65 -> bb4__0_65 [label="return"];
    bb3__0_65 -> bb30__0_65 [label="unwind"];
    bb4__0_65 -> bb5__0_65 [label="return"];
    bb4__0_65 -> bb30__0_65 [label="unwind"];
    bb5__0_65 -> bb6__0_65 [label="return"];
    bb5__0_65 -> bb30__0_65 [label="unwind"];
    bb6__0_65 -> bb7__0_65 [label="return"];
    bb6__0_65 -> bb30__0_65 [label="unwind"];
    bb7__0_65 -> bb8__0_65 [label="0"];
    bb7__0_65 -> bb9__0_65 [label="1"];
    bb7__0_65 -> bb2__0_65 [label="otherwise"];
    bb8__0_65 -> bb10__0_65 [label="return"];
    bb8__0_65 -> bb30__0_65 [label="unwind"];
    bb9__0_65 -> bb31__0_65 [label="return"];
    bb9__0_65 -> bb30__0_65 [label="unwind"];
    bb10__0_65 -> bb11__0_65 [label="return"];
    bb10__0_65 -> bb30__0_65 [label="unwind"];
    bb11__0_65 -> bb12__0_65 [label="return"];
    bb11__0_65 -> bb30__0_65 [label="unwind"];
    bb12__0_65 -> bb13__0_65 [label="return"];
    bb12__0_65 -> bb30__0_65 [label="unwind"];
    bb13__0_65 -> bb14__0_65 [label="0"];
    bb13__0_65 -> bb15__0_65 [label="1"];
    bb13__0_65 -> bb2__0_65 [label="otherwise"];
    bb14__0_65 -> bb16__0_65 [label="return"];
    bb14__0_65 -> bb30__0_65 [label="unwind"];
    bb15__0_65 -> bb32__0_65 [label="return"];
    bb15__0_65 -> bb30__0_65 [label="unwind"];
    bb16__0_65 -> bb17__0_65 [label="return"];
    bb16__0_65 -> bb30__0_65 [label="unwind"];
    bb17__0_65 -> bb18__0_65 [label="return"];
    bb17__0_65 -> bb30__0_65 [label="unwind"];
    bb18__0_65 -> bb19__0_65 [label="return"];
    bb18__0_65 -> bb30__0_65 [label="unwind"];
    bb19__0_65 -> bb20__0_65 [label="1"];
    bb19__0_65 -> bb25__0_65 [label="otherwise"];
    bb20__0_65 -> bb21__0_65 [label="1"];
    bb20__0_65 -> bb25__0_65 [label="otherwise"];
    bb21__0_65 -> bb22__0_65 [label="return"];
    bb21__0_65 -> bb30__0_65 [label="unwind"];
    bb22__0_65 -> bb23__0_65 [label="return"];
    bb22__0_65 -> bb30__0_65 [label="unwind"];
    bb23__0_65 -> bb24__0_65 [label="return"];
    bb23__0_65 -> bb30__0_65 [label="unwind"];
    bb24__0_65 -> bb33__0_65 [label="return"];
    bb24__0_65 -> bb30__0_65 [label="unwind"];
    bb25__0_65 -> bb27__0_65 [label=""];
    bb26__0_65 -> bb27__0_65 [label="return"];
    bb29__0_65 -> bb28__0_65 [label="return"];
    bb30__0_65 -> bb28__0_65 [label="0"];
    bb30__0_65 -> bb29__0_65 [label="otherwise"];
    bb31__0_65 -> bb26__0_65 [label=""];
    bb32__0_65 -> bb26__0_65 [label=""];
    bb33__0_65 -> bb25__0_65 [label=""];
}
subgraph cluster_Mir_0_66 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn SimpleGraph::&lt;T, U&gt;::add_nodes(_1: &amp;mut SimpleGraph&lt;T, U&gt;, _2: V) -&gt; ()<br align="left"/>let mut _3: &amp;mut std::vec::Vec&lt;std::option::Option&lt;std::ptr::NonNull&lt;Node&lt;T, U&gt;&gt;&gt;&gt;;<br align="left"/>let mut _4: std::vec::Vec&lt;std::option::Option&lt;std::ptr::NonNull&lt;Node&lt;T, U&gt;&gt;&gt;&gt;;<br align="left"/>let mut _5: std::iter::Map&lt;&lt;V as std::iter::IntoIterator&gt;::IntoIter, [closure@src/lib.rs:132:18: 132:21]&gt;;<br align="left"/>let mut _6: &lt;V as std::iter::IntoIterator&gt;::IntoIter;<br align="left"/>let _7: ();<br align="left"/>let mut _8: &amp;mut std::vec::Vec&lt;std::option::Option&lt;std::ptr::NonNull&lt;Node&lt;T, U&gt;&gt;&gt;&gt;;<br align="left"/>debug self =&gt; _1;<br align="left"/>debug nodes =&gt; _2;<br align="left"/>debug nodes_to_add =&gt; _3;<br align="left"/>>;
    bb0__0_66 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left">_6 = &lt;V as IntoIterator&gt;::into_iter(move _2)</td></tr></table>>];
    bb1__0_66 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left">_5 = &lt;&lt;V as IntoIterator&gt;::IntoIter as Iterator&gt;::map::&lt;Option&lt;NonNull&lt;Node&lt;T, U&gt;&gt;&gt;, [closure@src/lib.rs:132:18: 132:21]&gt;(move _6, const ZeroSized: [closure@src/lib.rs:132:18: 132:21])</td></tr></table>>];
    bb2__0_66 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left">_4 = &lt;Map&lt;&lt;V as IntoIterator&gt;::IntoIter, [closure@src/lib.rs:132:18: 132:21]&gt; as Iterator&gt;::collect::&lt;Vec&lt;Option&lt;NonNull&lt;Node&lt;T, U&gt;&gt;&gt;&gt;&gt;(move _5)</td></tr></table>>];
    bb3__0_66 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">_3 = &amp;mut _4<br/>_8 = &amp;mut ((*_1).0: std::vec::Vec&lt;std::option::Option&lt;std::ptr::NonNull&lt;Node&lt;T, U&gt;&gt;&gt;&gt;)<br/></td></tr><tr><td align="left">_7 = Vec::&lt;Option&lt;NonNull&lt;Node&lt;T, U&gt;&gt;&gt;&gt;::append(move _8, _3)</td></tr></table>>];
    bb4__0_66 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left">drop(_4)</td></tr></table>>];
    bb5__0_66 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left">return</td></tr></table>>];
    bb6__0_66 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">6 (cleanup)</td></tr><tr><td align="left">drop(_4)</td></tr></table>>];
    bb7__0_66 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">7 (cleanup)</td></tr><tr><td align="left">resume</td></tr></table>>];
    bb0__0_66 -> bb1__0_66 [label="return"];
    bb1__0_66 -> bb2__0_66 [label="return"];
    bb2__0_66 -> bb3__0_66 [label="return"];
    bb3__0_66 -> bb4__0_66 [label="return"];
    bb3__0_66 -> bb6__0_66 [label="unwind"];
    bb4__0_66 -> bb5__0_66 [label="return"];
    bb6__0_66 -> bb7__0_66 [label="return"];
}
subgraph cluster_Mir_0_68 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn SimpleGraph::&lt;T, U&gt;::add_nodes::{closure#0}(_1: &amp;mut [closure@src/lib.rs:132:18: 132:21], _2: T) -&gt; std::option::Option&lt;std::ptr::NonNull&lt;Node&lt;T, U&gt;&gt;&gt;<br align="left"/>let mut _3: std::ptr::NonNull&lt;Node&lt;T, U&gt;&gt;;<br align="left"/>let mut _4: *mut Node&lt;T, U&gt;;<br align="left"/>let mut _5: std::boxed::Box&lt;Node&lt;T, U&gt;&gt;;<br align="left"/>let mut _6: Node&lt;T, U&gt;;<br align="left"/>let mut _7: T;<br align="left"/>let mut _8: std::vec::Vec&lt;std::option::Option&lt;std::ptr::NonNull&lt;Edge&lt;T, U&gt;&gt;&gt;&gt;;<br align="left"/>debug n =&gt; _2;<br align="left"/>>;
    bb0__0_68 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">_7 = move _2<br/></td></tr><tr><td align="left">_8 = Vec::&lt;Option&lt;NonNull&lt;Edge&lt;T, U&gt;&gt;&gt;&gt;::new()</td></tr></table>>];
    bb1__0_68 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">_6 = Node::&lt;T, U&gt; { elem: move _7, connections: move _8 }<br/></td></tr><tr><td align="left">_5 = Box::&lt;Node&lt;T, U&gt;&gt;::new(move _6)</td></tr></table>>];
    bb2__0_68 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left">_4 = Box::&lt;Node&lt;T, U&gt;&gt;::into_raw(move _5)</td></tr></table>>];
    bb3__0_68 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left">_3 = NonNull::&lt;Node&lt;T, U&gt;&gt;::new_unchecked(move _4)</td></tr></table>>];
    bb4__0_68 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">_0 = Option::&lt;NonNull&lt;Node&lt;T, U&gt;&gt;&gt;::Some(move _3)<br/></td></tr><tr><td align="left">return</td></tr></table>>];
    bb5__0_68 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">5 (cleanup)</td></tr><tr><td align="left">drop(_7)</td></tr></table>>];
    bb6__0_68 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">6 (cleanup)</td></tr><tr><td align="left">resume</td></tr></table>>];
    bb0__0_68 -> bb1__0_68 [label="return"];
    bb0__0_68 -> bb5__0_68 [label="unwind"];
    bb1__0_68 -> bb2__0_68 [label="return"];
    bb2__0_68 -> bb3__0_68 [label="return"];
    bb3__0_68 -> bb4__0_68 [label="return"];
    bb5__0_68 -> bb6__0_68 [label="return"];
}
subgraph cluster_Mir_0_69 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn SimpleGraph::&lt;T, U&gt;::iter_nodes(_1: &amp;SimpleGraph&lt;T, U&gt;) -&gt; IterNodes&lt;'_, T, U&gt;<br align="left"/>let mut _2: std::slice::Iter&lt;'_, std::option::Option&lt;std::ptr::NonNull&lt;Node&lt;T, U&gt;&gt;&gt;&gt;;<br align="left"/>let mut _3: &amp;[std::option::Option&lt;std::ptr::NonNull&lt;Node&lt;T, U&gt;&gt;&gt;];<br align="left"/>let _4: &amp;[std::option::Option&lt;std::ptr::NonNull&lt;Node&lt;T, U&gt;&gt;&gt;];<br align="left"/>let mut _5: &amp;std::vec::Vec&lt;std::option::Option&lt;std::ptr::NonNull&lt;Node&lt;T, U&gt;&gt;&gt;&gt;;<br align="left"/>debug self =&gt; _1;<br align="left"/>>;
    bb0__0_69 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">_5 = &amp;((*_1).0: std::vec::Vec&lt;std::option::Option&lt;std::ptr::NonNull&lt;Node&lt;T, U&gt;&gt;&gt;&gt;)<br/></td></tr><tr><td align="left">_4 = &lt;Vec&lt;Option&lt;NonNull&lt;Node&lt;T, U&gt;&gt;&gt;&gt; as Deref&gt;::deref(move _5)</td></tr></table>>];
    bb1__0_69 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">_3 = _4<br/></td></tr><tr><td align="left">_2 = core::slice::&lt;impl [Option&lt;NonNull&lt;Node&lt;T, U&gt;&gt;&gt;]&gt;::iter(move _3)</td></tr></table>>];
    bb2__0_69 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">_0 = IterNodes::&lt;'_, T, U&gt; { nodes: move _2, _boo: const ZeroSized: PhantomData&lt;&amp;T&gt; }<br/></td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_69 -> bb1__0_69 [label="return"];
    bb1__0_69 -> bb2__0_69 [label="return"];
}
subgraph cluster_Mir_0_70 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn SimpleGraph::&lt;T, U&gt;::iter_nodes_edges(_1: &amp;SimpleGraph&lt;T, U&gt;) -&gt; IterNodesEdge&lt;'_, T, U&gt;<br align="left"/>let mut _2: IterNodes&lt;'_, T, U&gt;;<br align="left"/>let mut _3: std::slice::Iter&lt;'_, std::option::Option&lt;std::ptr::NonNull&lt;Node&lt;T, U&gt;&gt;&gt;&gt;;<br align="left"/>let mut _4: &amp;[std::option::Option&lt;std::ptr::NonNull&lt;Node&lt;T, U&gt;&gt;&gt;];<br align="left"/>let _5: &amp;[std::option::Option&lt;std::ptr::NonNull&lt;Node&lt;T, U&gt;&gt;&gt;];<br align="left"/>let mut _6: &amp;std::vec::Vec&lt;std::option::Option&lt;std::ptr::NonNull&lt;Node&lt;T, U&gt;&gt;&gt;&gt;;<br align="left"/>debug self =&gt; _1;<br align="left"/>>;
    bb0__0_70 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">_6 = &amp;((*_1).0: std::vec::Vec&lt;std::option::Option&lt;std::ptr::NonNull&lt;Node&lt;T, U&gt;&gt;&gt;&gt;)<br/></td></tr><tr><td align="left">_5 = &lt;Vec&lt;Option&lt;NonNull&lt;Node&lt;T, U&gt;&gt;&gt;&gt; as Deref&gt;::deref(move _6)</td></tr></table>>];
    bb1__0_70 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">_4 = _5<br/></td></tr><tr><td align="left">_3 = core::slice::&lt;impl [Option&lt;NonNull&lt;Node&lt;T, U&gt;&gt;&gt;]&gt;::iter(move _4)</td></tr></table>>];
    bb2__0_70 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">_2 = IterNodes::&lt;'_, T, U&gt; { nodes: move _3, _boo: const ZeroSized: PhantomData&lt;&amp;T&gt; }<br/>_0 = IterNodesEdge::&lt;'_, T, U&gt;(move _2)<br/></td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_70 -> bb1__0_70 [label="return"];
    bb1__0_70 -> bb2__0_70 [label="return"];
}
subgraph cluster_Mir_0_71 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn SimpleGraph::&lt;T, U&gt;::iter_mut_nodes(_1: &amp;mut SimpleGraph&lt;T, U&gt;) -&gt; IterMutNodes&lt;'_, T, U&gt;<br align="left"/>let mut _2: std::slice::IterMut&lt;'_, std::option::Option&lt;std::ptr::NonNull&lt;Node&lt;T, U&gt;&gt;&gt;&gt;;<br align="left"/>let mut _3: &amp;mut [std::option::Option&lt;std::ptr::NonNull&lt;Node&lt;T, U&gt;&gt;&gt;];<br align="left"/>let mut _4: &amp;mut [std::option::Option&lt;std::ptr::NonNull&lt;Node&lt;T, U&gt;&gt;&gt;];<br align="left"/>let mut _5: &amp;mut std::vec::Vec&lt;std::option::Option&lt;std::ptr::NonNull&lt;Node&lt;T, U&gt;&gt;&gt;&gt;;<br align="left"/>debug self =&gt; _1;<br align="left"/>>;
    bb0__0_71 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">_5 = &amp;mut ((*_1).0: std::vec::Vec&lt;std::option::Option&lt;std::ptr::NonNull&lt;Node&lt;T, U&gt;&gt;&gt;&gt;)<br/></td></tr><tr><td align="left">_4 = &lt;Vec&lt;Option&lt;NonNull&lt;Node&lt;T, U&gt;&gt;&gt;&gt; as DerefMut&gt;::deref_mut(move _5)</td></tr></table>>];
    bb1__0_71 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">_3 = _4<br/></td></tr><tr><td align="left">_2 = core::slice::&lt;impl [Option&lt;NonNull&lt;Node&lt;T, U&gt;&gt;&gt;]&gt;::iter_mut(move _3)</td></tr></table>>];
    bb2__0_71 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">_0 = IterMutNodes::&lt;'_, T, U&gt; { nodes: move _2, _boo: const ZeroSized: PhantomData&lt;&amp;T&gt; }<br/></td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_71 -> bb1__0_71 [label="return"];
    bb1__0_71 -> bb2__0_71 [label="return"];
}
subgraph cluster_Mir_0_72 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn SimpleGraph::&lt;T, U&gt;::iter_edges(_1: &amp;SimpleGraph&lt;T, U&gt;) -&gt; IterEdges&lt;'_, T, U&gt;<br align="left"/>let mut _2: std::slice::Iter&lt;'_, std::option::Option&lt;std::ptr::NonNull&lt;Edge&lt;T, U&gt;&gt;&gt;&gt;;<br align="left"/>let mut _3: &amp;[std::option::Option&lt;std::ptr::NonNull&lt;Edge&lt;T, U&gt;&gt;&gt;];<br align="left"/>let _4: &amp;[std::option::Option&lt;std::ptr::NonNull&lt;Edge&lt;T, U&gt;&gt;&gt;];<br align="left"/>let mut _5: &amp;std::vec::Vec&lt;std::option::Option&lt;std::ptr::NonNull&lt;Edge&lt;T, U&gt;&gt;&gt;&gt;;<br align="left"/>debug self =&gt; _1;<br align="left"/>>;
    bb0__0_72 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">_5 = &amp;((*_1).1: std::vec::Vec&lt;std::option::Option&lt;std::ptr::NonNull&lt;Edge&lt;T, U&gt;&gt;&gt;&gt;)<br/></td></tr><tr><td align="left">_4 = &lt;Vec&lt;Option&lt;NonNull&lt;Edge&lt;T, U&gt;&gt;&gt;&gt; as Deref&gt;::deref(move _5)</td></tr></table>>];
    bb1__0_72 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">_3 = _4<br/></td></tr><tr><td align="left">_2 = core::slice::&lt;impl [Option&lt;NonNull&lt;Edge&lt;T, U&gt;&gt;&gt;]&gt;::iter(move _3)</td></tr></table>>];
    bb2__0_72 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">_0 = IterEdges::&lt;'_, T, U&gt; { edges: move _2, _boo: const ZeroSized: PhantomData&lt;&amp;T&gt; }<br/></td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_72 -> bb1__0_72 [label="return"];
    bb1__0_72 -> bb2__0_72 [label="return"];
}
subgraph cluster_Mir_0_73 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn SimpleGraph::&lt;T, U&gt;::iter_mut_edges(_1: &amp;mut SimpleGraph&lt;T, U&gt;) -&gt; IterMutEdges&lt;'_, T, U&gt;<br align="left"/>let mut _2: std::slice::IterMut&lt;'_, std::option::Option&lt;std::ptr::NonNull&lt;Edge&lt;T, U&gt;&gt;&gt;&gt;;<br align="left"/>let mut _3: &amp;mut [std::option::Option&lt;std::ptr::NonNull&lt;Edge&lt;T, U&gt;&gt;&gt;];<br align="left"/>let mut _4: &amp;mut [std::option::Option&lt;std::ptr::NonNull&lt;Edge&lt;T, U&gt;&gt;&gt;];<br align="left"/>let mut _5: &amp;mut std::vec::Vec&lt;std::option::Option&lt;std::ptr::NonNull&lt;Edge&lt;T, U&gt;&gt;&gt;&gt;;<br align="left"/>debug self =&gt; _1;<br align="left"/>>;
    bb0__0_73 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">_5 = &amp;mut ((*_1).1: std::vec::Vec&lt;std::option::Option&lt;std::ptr::NonNull&lt;Edge&lt;T, U&gt;&gt;&gt;&gt;)<br/></td></tr><tr><td align="left">_4 = &lt;Vec&lt;Option&lt;NonNull&lt;Edge&lt;T, U&gt;&gt;&gt;&gt; as DerefMut&gt;::deref_mut(move _5)</td></tr></table>>];
    bb1__0_73 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">_3 = _4<br/></td></tr><tr><td align="left">_2 = core::slice::&lt;impl [Option&lt;NonNull&lt;Edge&lt;T, U&gt;&gt;&gt;]&gt;::iter_mut(move _3)</td></tr></table>>];
    bb2__0_73 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">_0 = IterMutEdges::&lt;'_, T, U&gt; { edges: move _2, _boo: const ZeroSized: PhantomData&lt;&amp;T&gt; }<br/></td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_73 -> bb1__0_73 [label="return"];
    bb1__0_73 -> bb2__0_73 [label="return"];
}
subgraph cluster_Mir_0_74 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn SimpleGraph::&lt;T, U&gt;::drop_all_edges(_1: &amp;mut SimpleGraph&lt;T, U&gt;) -&gt; ()<br align="left"/>let mut _2: std::option::Option&lt;&amp;mut std::ptr::NonNull&lt;Node&lt;T, U&gt;&gt;&gt;;<br align="left"/>let mut _3: &amp;mut std::iter::Flatten&lt;&amp;mut std::slice::IterMut&lt;'_, std::option::Option&lt;std::ptr::NonNull&lt;Node&lt;T, U&gt;&gt;&gt;&gt;&gt;;<br align="left"/>let mut _4: std::iter::Flatten&lt;&amp;mut std::slice::IterMut&lt;'_, std::option::Option&lt;std::ptr::NonNull&lt;Node&lt;T, U&gt;&gt;&gt;&gt;&gt;;<br align="left"/>let mut _5: &amp;mut std::slice::IterMut&lt;'_, std::option::Option&lt;std::ptr::NonNull&lt;Node&lt;T, U&gt;&gt;&gt;&gt;;<br align="left"/>let mut _6: &amp;mut std::slice::IterMut&lt;'_, std::option::Option&lt;std::ptr::NonNull&lt;Node&lt;T, U&gt;&gt;&gt;&gt;;<br align="left"/>let mut _7: &amp;mut std::slice::IterMut&lt;'_, std::option::Option&lt;std::ptr::NonNull&lt;Node&lt;T, U&gt;&gt;&gt;&gt;;<br align="left"/>let mut _8: std::slice::IterMut&lt;'_, std::option::Option&lt;std::ptr::NonNull&lt;Node&lt;T, U&gt;&gt;&gt;&gt;;<br align="left"/>let mut _9: &amp;mut [std::option::Option&lt;std::ptr::NonNull&lt;Node&lt;T, U&gt;&gt;&gt;];<br align="left"/>let mut _10: &amp;mut [std::option::Option&lt;std::ptr::NonNull&lt;Node&lt;T, U&gt;&gt;&gt;];<br align="left"/>let mut _11: &amp;mut std::vec::Vec&lt;std::option::Option&lt;std::ptr::NonNull&lt;Node&lt;T, U&gt;&gt;&gt;&gt;;<br align="left"/>let mut _12: isize;<br align="left"/>let _13: &amp;mut std::ptr::NonNull&lt;Node&lt;T, U&gt;&gt;;<br align="left"/>let _14: &amp;mut Node&lt;T, U&gt;;<br align="left"/>let mut _15: &amp;mut Node&lt;T, U&gt;;<br align="left"/>let _16: ();<br align="left"/>let mut _17: &amp;mut std::vec::Vec&lt;std::option::Option&lt;std::ptr::NonNull&lt;Edge&lt;T, U&gt;&gt;&gt;&gt;;<br align="left"/>let _18: ();<br align="left"/>let mut _19: std::vec::Drain&lt;'_, std::option::Option&lt;std::ptr::NonNull&lt;Edge&lt;T, U&gt;&gt;&gt;&gt;;<br align="left"/>let mut _20: &amp;mut std::vec::Vec&lt;std::option::Option&lt;std::ptr::NonNull&lt;Edge&lt;T, U&gt;&gt;&gt;&gt;;<br align="left"/>debug self =&gt; _1;<br align="left"/>debug node =&gt; _13;<br align="left"/>debug node =&gt; _14;<br align="left"/>>;
    bb0__0_74 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">_11 = &amp;mut ((*_1).0: std::vec::Vec&lt;std::option::Option&lt;std::ptr::NonNull&lt;Node&lt;T, U&gt;&gt;&gt;&gt;)<br/></td></tr><tr><td align="left">_10 = &lt;Vec&lt;Option&lt;NonNull&lt;Node&lt;T, U&gt;&gt;&gt;&gt; as DerefMut&gt;::deref_mut(move _11)</td></tr></table>>];
    bb1__0_74 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">_9 = _10<br/></td></tr><tr><td align="left">_8 = core::slice::&lt;impl [Option&lt;NonNull&lt;Node&lt;T, U&gt;&gt;&gt;]&gt;::iter_mut(move _9)</td></tr></table>>];
    bb2__0_74 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">_7 = &amp;mut _8<br/></td></tr><tr><td align="left">_6 = &lt;std::slice::IterMut&lt;'_, Option&lt;NonNull&lt;Node&lt;T, U&gt;&gt;&gt;&gt; as Iterator&gt;::by_ref(move _7)</td></tr></table>>];
    bb3__0_74 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">_5 = _6<br/></td></tr><tr><td align="left">_4 = &lt;&amp;mut std::slice::IterMut&lt;'_, Option&lt;NonNull&lt;Node&lt;T, U&gt;&gt;&gt;&gt; as Iterator&gt;::flatten(move _5)</td></tr></table>>];
    bb4__0_74 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">_3 = &amp;mut _4<br/></td></tr><tr><td align="left">_2 = &lt;Flatten&lt;&amp;mut std::slice::IterMut&lt;'_, Option&lt;NonNull&lt;Node&lt;T, U&gt;&gt;&gt;&gt;&gt; as Iterator&gt;::next(move _3)</td></tr></table>>];
    bb5__0_74 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">_12 = discriminant(_2)<br/></td></tr><tr><td align="left">switchInt(move _12)</td></tr></table>>];
    bb6__0_74 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">_13 = move ((_2 as Some).0: &amp;mut std::ptr::NonNull&lt;Node&lt;T, U&gt;&gt;)<br/></td></tr><tr><td align="left">_15 = NonNull::&lt;Node&lt;T, U&gt;&gt;::as_mut::&lt;'_&gt;(_13)</td></tr></table>>];
    bb7__0_74 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">_14 = _15<br/>_17 = &amp;mut ((*_14).1: std::vec::Vec&lt;std::option::Option&lt;std::ptr::NonNull&lt;Edge&lt;T, U&gt;&gt;&gt;&gt;)<br/></td></tr><tr><td align="left">_16 = Vec::&lt;Option&lt;NonNull&lt;Edge&lt;T, U&gt;&gt;&gt;&gt;::truncate(move _17, const 0_usize)</td></tr></table>>];
    bb8__0_74 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">_20 = &amp;mut ((*_1).1: std::vec::Vec&lt;std::option::Option&lt;std::ptr::NonNull&lt;Edge&lt;T, U&gt;&gt;&gt;&gt;)<br/></td></tr><tr><td align="left">_19 = Vec::&lt;Option&lt;NonNull&lt;Edge&lt;T, U&gt;&gt;&gt;&gt;::drain::&lt;RangeFull&gt;(move _20, const RangeFull)</td></tr></table>>];
    bb9__0_74 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left">_18 = &lt;std::vec::Drain&lt;'_, Option&lt;NonNull&lt;Edge&lt;T, U&gt;&gt;&gt;&gt; as Iterator&gt;::for_each::&lt;[closure@src/lib.rs:196:39: 196:53]&gt;(move _19, const ZeroSized: [closure@src/lib.rs:196:39: 196:53])</td></tr></table>>];
    bb10__0_74 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_74 -> bb1__0_74 [label="return"];
    bb1__0_74 -> bb2__0_74 [label="return"];
    bb2__0_74 -> bb3__0_74 [label="return"];
    bb3__0_74 -> bb4__0_74 [label="return"];
    bb4__0_74 -> bb5__0_74 [label="return"];
    bb5__0_74 -> bb6__0_74 [label="1"];
    bb5__0_74 -> bb8__0_74 [label="otherwise"];
    bb6__0_74 -> bb7__0_74 [label="return"];
    bb7__0_74 -> bb8__0_74 [label="return"];
    bb8__0_74 -> bb9__0_74 [label="return"];
    bb9__0_74 -> bb10__0_74 [label="return"];
}
subgraph cluster_Mir_0_75 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn SimpleGraph::&lt;T, U&gt;::drop_all_edges::{closure#0}(_1: &amp;mut [closure@src/lib.rs:196:39: 196:53], _2: std::option::Option&lt;std::ptr::NonNull&lt;Edge&lt;T, U&gt;&gt;&gt;) -&gt; ()<br align="left"/>let _3: std::option::Option&lt;std::boxed::Box&lt;Edge&lt;T, U&gt;&gt;&gt;;<br align="left"/>debug edge_pointer =&gt; _2;<br align="left"/>>;
    bb0__0_75 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left">_3 = Option::&lt;NonNull&lt;Edge&lt;T, U&gt;&gt;&gt;::map::&lt;Box&lt;Edge&lt;T, U&gt;&gt;, [closure@src/lib.rs:197:30: 197:36]&gt;(_2, const ZeroSized: [closure@src/lib.rs:197:30: 197:36])</td></tr></table>>];
    bb1__0_75 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left">drop(_3)</td></tr></table>>];
    bb2__0_75 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_75 -> bb1__0_75 [label="return"];
    bb1__0_75 -> bb2__0_75 [label="return"];
}
subgraph cluster_Mir_0_76 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn SimpleGraph::&lt;T, U&gt;::drop_all_edges::{closure#0}::{closure#0}(_1: [closure@src/lib.rs:197:30: 197:36], _2: std::ptr::NonNull&lt;Edge&lt;T, U&gt;&gt;) -&gt; std::boxed::Box&lt;Edge&lt;T, U&gt;&gt;<br align="left"/>let mut _3: *mut Edge&lt;T, U&gt;;<br align="left"/>debug node =&gt; _2;<br align="left"/>>;
    bb0__0_76 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left">_3 = NonNull::&lt;Edge&lt;T, U&gt;&gt;::as_ptr(_2)</td></tr></table>>];
    bb1__0_76 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left">_0 = Box::&lt;Edge&lt;T, U&gt;&gt;::from_raw(move _3)</td></tr></table>>];
    bb2__0_76 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_76 -> bb1__0_76 [label="return"];
    bb1__0_76 -> bb2__0_76 [label="return"];
}
subgraph cluster_Mir_0_77 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn SimpleGraph::&lt;T, U&gt;::drop_all_nodes(_1: &amp;mut SimpleGraph&lt;T, U&gt;) -&gt; ()<br align="left"/>let _2: ();<br align="left"/>let _3: ();<br align="left"/>let mut _4: std::vec::Drain&lt;'_, std::option::Option&lt;std::ptr::NonNull&lt;Node&lt;T, U&gt;&gt;&gt;&gt;;<br align="left"/>let mut _5: &amp;mut std::vec::Vec&lt;std::option::Option&lt;std::ptr::NonNull&lt;Node&lt;T, U&gt;&gt;&gt;&gt;;<br align="left"/>debug self =&gt; _1;<br align="left"/>>;
    bb0__0_77 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left">_2 = SimpleGraph::&lt;T, U&gt;::drop_all_edges(_1)</td></tr></table>>];
    bb1__0_77 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">_5 = &amp;mut ((*_1).0: std::vec::Vec&lt;std::option::Option&lt;std::ptr::NonNull&lt;Node&lt;T, U&gt;&gt;&gt;&gt;)<br/></td></tr><tr><td align="left">_4 = Vec::&lt;Option&lt;NonNull&lt;Node&lt;T, U&gt;&gt;&gt;&gt;::drain::&lt;RangeFull&gt;(move _5, const RangeFull)</td></tr></table>>];
    bb2__0_77 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left">_3 = &lt;std::vec::Drain&lt;'_, Option&lt;NonNull&lt;Node&lt;T, U&gt;&gt;&gt;&gt; as Iterator&gt;::for_each::&lt;[closure@src/lib.rs:207:39: 207:53]&gt;(move _4, const ZeroSized: [closure@src/lib.rs:207:39: 207:53])</td></tr></table>>];
    bb3__0_77 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_77 -> bb1__0_77 [label="return"];
    bb1__0_77 -> bb2__0_77 [label="return"];
    bb2__0_77 -> bb3__0_77 [label="return"];
}
subgraph cluster_Mir_0_78 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn SimpleGraph::&lt;T, U&gt;::drop_all_nodes::{closure#0}(_1: &amp;mut [closure@src/lib.rs:207:39: 207:53], _2: std::option::Option&lt;std::ptr::NonNull&lt;Node&lt;T, U&gt;&gt;&gt;) -&gt; ()<br align="left"/>let _3: std::option::Option&lt;std::boxed::Box&lt;Node&lt;T, U&gt;&gt;&gt;;<br align="left"/>debug node_pointer =&gt; _2;<br align="left"/>>;
    bb0__0_78 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left">_3 = Option::&lt;NonNull&lt;Node&lt;T, U&gt;&gt;&gt;::map::&lt;Box&lt;Node&lt;T, U&gt;&gt;, [closure@src/lib.rs:208:30: 208:36]&gt;(_2, const ZeroSized: [closure@src/lib.rs:208:30: 208:36])</td></tr></table>>];
    bb1__0_78 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left">drop(_3)</td></tr></table>>];
    bb2__0_78 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_78 -> bb1__0_78 [label="return"];
    bb1__0_78 -> bb2__0_78 [label="return"];
}
subgraph cluster_Mir_0_79 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn SimpleGraph::&lt;T, U&gt;::drop_all_nodes::{closure#0}::{closure#0}(_1: [closure@src/lib.rs:208:30: 208:36], _2: std::ptr::NonNull&lt;Node&lt;T, U&gt;&gt;) -&gt; std::boxed::Box&lt;Node&lt;T, U&gt;&gt;<br align="left"/>let mut _3: *mut Node&lt;T, U&gt;;<br align="left"/>debug node =&gt; _2;<br align="left"/>>;
    bb0__0_79 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left">_3 = NonNull::&lt;Node&lt;T, U&gt;&gt;::as_ptr(_2)</td></tr></table>>];
    bb1__0_79 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left">_0 = Box::&lt;Node&lt;T, U&gt;&gt;::from_raw(move _3)</td></tr></table>>];
    bb2__0_79 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_79 -> bb1__0_79 [label="return"];
    bb1__0_79 -> bb2__0_79 [label="return"];
}
subgraph cluster_Mir_0_83 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn &lt;SimpleGraph&lt;T, U&gt; as Drop&gt;::drop(_1: &amp;mut SimpleGraph&lt;T, U&gt;) -&gt; ()<br align="left"/>let _2: ();<br align="left"/>debug self =&gt; _1;<br align="left"/>>;
    bb0__0_83 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left">_2 = SimpleGraph::&lt;T, U&gt;::drop_all_nodes(_1)</td></tr></table>>];
    bb1__0_83 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_83 -> bb1__0_83 [label="return"];
}
subgraph cluster_Mir_0_89 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn &lt;IterNodes&lt;'a, T, U&gt; as Iterator&gt;::next(_1: &amp;mut IterNodes&lt;'_, T, U&gt;) -&gt; std::option::Option&lt;&amp;T&gt;<br align="left"/>let mut _2: std::option::Option&lt;&amp;std::ptr::NonNull&lt;Node&lt;T, U&gt;&gt;&gt;;<br align="left"/>let mut _3: &amp;mut std::iter::Flatten&lt;&amp;mut std::slice::Iter&lt;'_, std::option::Option&lt;std::ptr::NonNull&lt;Node&lt;T, U&gt;&gt;&gt;&gt;&gt;;<br align="left"/>let mut _4: std::iter::Flatten&lt;&amp;mut std::slice::Iter&lt;'_, std::option::Option&lt;std::ptr::NonNull&lt;Node&lt;T, U&gt;&gt;&gt;&gt;&gt;;<br align="left"/>let mut _5: &amp;mut std::slice::Iter&lt;'_, std::option::Option&lt;std::ptr::NonNull&lt;Node&lt;T, U&gt;&gt;&gt;&gt;;<br align="left"/>let mut _6: &amp;mut std::slice::Iter&lt;'_, std::option::Option&lt;std::ptr::NonNull&lt;Node&lt;T, U&gt;&gt;&gt;&gt;;<br align="left"/>let mut _7: &amp;mut std::slice::Iter&lt;'_, std::option::Option&lt;std::ptr::NonNull&lt;Node&lt;T, U&gt;&gt;&gt;&gt;;<br align="left"/>let mut _8: isize;<br align="left"/>let _9: &amp;std::ptr::NonNull&lt;Node&lt;T, U&gt;&gt;;<br align="left"/>let _10: &amp;Node&lt;T, U&gt;;<br align="left"/>let _11: &amp;T;<br align="left"/>debug self =&gt; _1;<br align="left"/>debug node =&gt; _9;<br align="left"/>debug node_ref =&gt; _10;<br align="left"/>>;
    bb0__0_89 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">_7 = &amp;mut ((*_1).0: std::slice::Iter&lt;'_, std::option::Option&lt;std::ptr::NonNull&lt;Node&lt;T, U&gt;&gt;&gt;&gt;)<br/></td></tr><tr><td align="left">_6 = &lt;std::slice::Iter&lt;'_, Option&lt;NonNull&lt;Node&lt;T, U&gt;&gt;&gt;&gt; as Iterator&gt;::by_ref(move _7)</td></tr></table>>];
    bb1__0_89 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">_5 = _6<br/></td></tr><tr><td align="left">_4 = &lt;&amp;mut std::slice::Iter&lt;'_, Option&lt;NonNull&lt;Node&lt;T, U&gt;&gt;&gt;&gt; as Iterator&gt;::flatten(move _5)</td></tr></table>>];
    bb2__0_89 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">_3 = &amp;mut _4<br/></td></tr><tr><td align="left">_2 = &lt;Flatten&lt;&amp;mut std::slice::Iter&lt;'_, Option&lt;NonNull&lt;Node&lt;T, U&gt;&gt;&gt;&gt;&gt; as Iterator&gt;::next(move _3)</td></tr></table>>];
    bb3__0_89 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">_8 = discriminant(_2)<br/></td></tr><tr><td align="left">switchInt(move _8)</td></tr></table>>];
    bb4__0_89 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">_9 = ((_2 as Some).0: &amp;std::ptr::NonNull&lt;Node&lt;T, U&gt;&gt;)<br/></td></tr><tr><td align="left">_10 = NonNull::&lt;Node&lt;T, U&gt;&gt;::as_ref::&lt;'_&gt;(_9)</td></tr></table>>];
    bb5__0_89 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">_11 = &amp;((*_10).0: T)<br/>_0 = Option::&lt;&amp;T&gt;::Some(_11)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb6__0_89 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">_0 = Option::&lt;&amp;T&gt;::None<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb7__0_89 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_89 -> bb1__0_89 [label="return"];
    bb1__0_89 -> bb2__0_89 [label="return"];
    bb2__0_89 -> bb3__0_89 [label="return"];
    bb3__0_89 -> bb4__0_89 [label="1"];
    bb3__0_89 -> bb6__0_89 [label="otherwise"];
    bb4__0_89 -> bb5__0_89 [label="return"];
    bb5__0_89 -> bb7__0_89 [label=""];
    bb6__0_89 -> bb7__0_89 [label=""];
}
subgraph cluster_Mir_0_95 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn &lt;IterNodesEdge&lt;'a, T, U&gt; as Iterator&gt;::next(_1: &amp;mut IterNodesEdge&lt;'_, T, U&gt;) -&gt; std::option::Option&lt;(&amp;T, std::vec::Vec&lt;&amp;U&gt;)&gt;<br align="left"/>let mut _2: std::option::Option&lt;&amp;std::ptr::NonNull&lt;Node&lt;T, U&gt;&gt;&gt;;<br align="left"/>let mut _3: &amp;mut std::iter::Flatten&lt;&amp;mut std::slice::Iter&lt;'_, std::option::Option&lt;std::ptr::NonNull&lt;Node&lt;T, U&gt;&gt;&gt;&gt;&gt;;<br align="left"/>let mut _4: std::iter::Flatten&lt;&amp;mut std::slice::Iter&lt;'_, std::option::Option&lt;std::ptr::NonNull&lt;Node&lt;T, U&gt;&gt;&gt;&gt;&gt;;<br align="left"/>let mut _5: &amp;mut std::slice::Iter&lt;'_, std::option::Option&lt;std::ptr::NonNull&lt;Node&lt;T, U&gt;&gt;&gt;&gt;;<br align="left"/>let mut _6: &amp;mut std::slice::Iter&lt;'_, std::option::Option&lt;std::ptr::NonNull&lt;Node&lt;T, U&gt;&gt;&gt;&gt;;<br align="left"/>let mut _7: &amp;mut std::slice::Iter&lt;'_, std::option::Option&lt;std::ptr::NonNull&lt;Node&lt;T, U&gt;&gt;&gt;&gt;;<br align="left"/>let mut _8: isize;<br align="left"/>let _9: &amp;std::ptr::NonNull&lt;Node&lt;T, U&gt;&gt;;<br align="left"/>let _10: &amp;Node&lt;T, U&gt;;<br align="left"/>let _11: std::vec::Vec&lt;&amp;U&gt;;<br align="left"/>let mut _12: std::iter::FilterMap&lt;std::slice::Iter&lt;'_, std::option::Option&lt;std::ptr::NonNull&lt;Edge&lt;T, U&gt;&gt;&gt;&gt;, [closure@src/lib.rs:245:29: 245:35]&gt;;<br align="left"/>let mut _13: std::slice::Iter&lt;'_, std::option::Option&lt;std::ptr::NonNull&lt;Edge&lt;T, U&gt;&gt;&gt;&gt;;<br align="left"/>let mut _14: &amp;[std::option::Option&lt;std::ptr::NonNull&lt;Edge&lt;T, U&gt;&gt;&gt;];<br align="left"/>let _15: &amp;[std::option::Option&lt;std::ptr::NonNull&lt;Edge&lt;T, U&gt;&gt;&gt;];<br align="left"/>let mut _16: &amp;std::vec::Vec&lt;std::option::Option&lt;std::ptr::NonNull&lt;Edge&lt;T, U&gt;&gt;&gt;&gt;;<br align="left"/>let mut _17: (&amp;T, std::vec::Vec&lt;&amp;U&gt;);<br align="left"/>let _18: &amp;T;<br align="left"/>let mut _19: std::vec::Vec&lt;&amp;U&gt;;<br align="left"/>debug self =&gt; _1;<br align="left"/>debug node =&gt; _9;<br align="left"/>debug node_ref =&gt; _10;<br align="left"/>debug edges =&gt; _11;<br align="left"/>>;
    bb0__0_95 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">_7 = &amp;mut (((*_1).0: IterNodes&lt;'_, T, U&gt;).0: std::slice::Iter&lt;'_, std::option::Option&lt;std::ptr::NonNull&lt;Node&lt;T, U&gt;&gt;&gt;&gt;)<br/></td></tr><tr><td align="left">_6 = &lt;std::slice::Iter&lt;'_, Option&lt;NonNull&lt;Node&lt;T, U&gt;&gt;&gt;&gt; as Iterator&gt;::by_ref(move _7)</td></tr></table>>];
    bb1__0_95 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">_5 = _6<br/></td></tr><tr><td align="left">_4 = &lt;&amp;mut std::slice::Iter&lt;'_, Option&lt;NonNull&lt;Node&lt;T, U&gt;&gt;&gt;&gt; as Iterator&gt;::flatten(move _5)</td></tr></table>>];
    bb2__0_95 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">_3 = &amp;mut _4<br/></td></tr><tr><td align="left">_2 = &lt;Flatten&lt;&amp;mut std::slice::Iter&lt;'_, Option&lt;NonNull&lt;Node&lt;T, U&gt;&gt;&gt;&gt;&gt; as Iterator&gt;::next(move _3)</td></tr></table>>];
    bb3__0_95 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">_8 = discriminant(_2)<br/></td></tr><tr><td align="left">switchInt(move _8)</td></tr></table>>];
    bb4__0_95 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">_9 = ((_2 as Some).0: &amp;std::ptr::NonNull&lt;Node&lt;T, U&gt;&gt;)<br/></td></tr><tr><td align="left">_10 = NonNull::&lt;Node&lt;T, U&gt;&gt;::as_ref::&lt;'_&gt;(_9)</td></tr></table>>];
    bb5__0_95 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">_16 = &amp;((*_10).1: std::vec::Vec&lt;std::option::Option&lt;std::ptr::NonNull&lt;Edge&lt;T, U&gt;&gt;&gt;&gt;)<br/></td></tr><tr><td align="left">_15 = &lt;Vec&lt;Option&lt;NonNull&lt;Edge&lt;T, U&gt;&gt;&gt;&gt; as Deref&gt;::deref(move _16)</td></tr></table>>];
    bb6__0_95 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">_14 = _15<br/></td></tr><tr><td align="left">_13 = core::slice::&lt;impl [Option&lt;NonNull&lt;Edge&lt;T, U&gt;&gt;&gt;]&gt;::iter(move _14)</td></tr></table>>];
    bb7__0_95 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left">_12 = &lt;std::slice::Iter&lt;'_, Option&lt;NonNull&lt;Edge&lt;T, U&gt;&gt;&gt;&gt; as Iterator&gt;::filter_map::&lt;&amp;U, [closure@src/lib.rs:245:29: 245:35]&gt;(move _13, const ZeroSized: [closure@src/lib.rs:245:29: 245:35])</td></tr></table>>];
    bb8__0_95 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left">_11 = &lt;FilterMap&lt;std::slice::Iter&lt;'_, Option&lt;NonNull&lt;Edge&lt;T, U&gt;&gt;&gt;&gt;, [closure@src/lib.rs:245:29: 245:35]&gt; as Iterator&gt;::collect::&lt;Vec&lt;&amp;U&gt;&gt;(move _12)</td></tr></table>>];
    bb9__0_95 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">_18 = &amp;((*_10).0: T)<br/>_19 = move _11<br/>_17 = (_18, move _19)<br/>_0 = Option::&lt;(&amp;T, Vec&lt;&amp;U&gt;)&gt;::Some(move _17)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb10__0_95 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">_0 = Option::&lt;(&amp;T, Vec&lt;&amp;U&gt;)&gt;::None<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb11__0_95 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_95 -> bb1__0_95 [label="return"];
    bb1__0_95 -> bb2__0_95 [label="return"];
    bb2__0_95 -> bb3__0_95 [label="return"];
    bb3__0_95 -> bb4__0_95 [label="1"];
    bb3__0_95 -> bb10__0_95 [label="otherwise"];
    bb4__0_95 -> bb5__0_95 [label="return"];
    bb5__0_95 -> bb6__0_95 [label="return"];
    bb6__0_95 -> bb7__0_95 [label="return"];
    bb7__0_95 -> bb8__0_95 [label="return"];
    bb8__0_95 -> bb9__0_95 [label="return"];
    bb9__0_95 -> bb11__0_95 [label=""];
    bb10__0_95 -> bb11__0_95 [label=""];
}
subgraph cluster_Mir_0_96 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn &lt;IterNodesEdge&lt;'a, T, U&gt; as Iterator&gt;::next::{closure#0}(_1: &amp;mut [closure@src/lib.rs:245:29: 245:35], _2: &amp;std::option::Option&lt;std::ptr::NonNull&lt;Edge&lt;T, U&gt;&gt;&gt;) -&gt; std::option::Option&lt;&amp;U&gt;<br align="left"/>let mut _3: std::option::Option&lt;std::ptr::NonNull&lt;Edge&lt;T, U&gt;&gt;&gt;;<br align="left"/>debug edge =&gt; _2;<br align="left"/>>;
    bb0__0_96 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">_3 = (*_2)<br/></td></tr><tr><td align="left">_0 = Option::&lt;NonNull&lt;Edge&lt;T, U&gt;&gt;&gt;::map::&lt;&amp;U, [closure@src/lib.rs:245:45: 245:51]&gt;(move _3, const ZeroSized: [closure@src/lib.rs:245:45: 245:51])</td></tr></table>>];
    bb1__0_96 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_96 -> bb1__0_96 [label="return"];
}
subgraph cluster_Mir_0_97 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn &lt;IterNodesEdge&lt;'a, T, U&gt; as Iterator&gt;::next::{closure#0}::{closure#0}(_1: [closure@src/lib.rs:245:45: 245:51], _2: std::ptr::NonNull&lt;Edge&lt;T, U&gt;&gt;) -&gt; &amp;U<br align="left"/>let _3: &amp;Edge&lt;T, U&gt;;<br align="left"/>let mut _4: &amp;std::ptr::NonNull&lt;Edge&lt;T, U&gt;&gt;;<br align="left"/>debug edge =&gt; _2;<br align="left"/>>;
    bb0__0_97 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">_4 = &amp;_2<br/></td></tr><tr><td align="left">_3 = NonNull::&lt;Edge&lt;T, U&gt;&gt;::as_ref::&lt;'_&gt;(move _4)</td></tr></table>>];
    bb1__0_97 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">_0 = &amp;((*_3).2: U)<br/></td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_97 -> bb1__0_97 [label="return"];
}
subgraph cluster_Mir_0_103 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn &lt;IterMutNodes&lt;'a, T, U&gt; as Iterator&gt;::next(_1: &amp;mut IterMutNodes&lt;'_, T, U&gt;) -&gt; std::option::Option&lt;&amp;mut T&gt;<br align="left"/>let mut _2: std::option::Option&lt;&amp;mut std::ptr::NonNull&lt;Node&lt;T, U&gt;&gt;&gt;;<br align="left"/>let mut _3: &amp;mut std::iter::Flatten&lt;&amp;mut std::slice::IterMut&lt;'_, std::option::Option&lt;std::ptr::NonNull&lt;Node&lt;T, U&gt;&gt;&gt;&gt;&gt;;<br align="left"/>let mut _4: std::iter::Flatten&lt;&amp;mut std::slice::IterMut&lt;'_, std::option::Option&lt;std::ptr::NonNull&lt;Node&lt;T, U&gt;&gt;&gt;&gt;&gt;;<br align="left"/>let mut _5: &amp;mut std::slice::IterMut&lt;'_, std::option::Option&lt;std::ptr::NonNull&lt;Node&lt;T, U&gt;&gt;&gt;&gt;;<br align="left"/>let mut _6: &amp;mut std::slice::IterMut&lt;'_, std::option::Option&lt;std::ptr::NonNull&lt;Node&lt;T, U&gt;&gt;&gt;&gt;;<br align="left"/>let mut _7: &amp;mut std::slice::IterMut&lt;'_, std::option::Option&lt;std::ptr::NonNull&lt;Node&lt;T, U&gt;&gt;&gt;&gt;;<br align="left"/>let mut _8: isize;<br align="left"/>let _9: &amp;mut std::ptr::NonNull&lt;Node&lt;T, U&gt;&gt;;<br align="left"/>let _10: &amp;mut Node&lt;T, U&gt;;<br align="left"/>let mut _11: &amp;mut Node&lt;T, U&gt;;<br align="left"/>let mut _12: &amp;mut T;<br align="left"/>debug self =&gt; _1;<br align="left"/>debug node =&gt; _9;<br align="left"/>debug node_ref =&gt; _10;<br align="left"/>>;
    bb0__0_103 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">_7 = &amp;mut ((*_1).0: std::slice::IterMut&lt;'_, std::option::Option&lt;std::ptr::NonNull&lt;Node&lt;T, U&gt;&gt;&gt;&gt;)<br/></td></tr><tr><td align="left">_6 = &lt;std::slice::IterMut&lt;'_, Option&lt;NonNull&lt;Node&lt;T, U&gt;&gt;&gt;&gt; as Iterator&gt;::by_ref(move _7)</td></tr></table>>];
    bb1__0_103 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">_5 = _6<br/></td></tr><tr><td align="left">_4 = &lt;&amp;mut std::slice::IterMut&lt;'_, Option&lt;NonNull&lt;Node&lt;T, U&gt;&gt;&gt;&gt; as Iterator&gt;::flatten(move _5)</td></tr></table>>];
    bb2__0_103 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">_3 = &amp;mut _4<br/></td></tr><tr><td align="left">_2 = &lt;Flatten&lt;&amp;mut std::slice::IterMut&lt;'_, Option&lt;NonNull&lt;Node&lt;T, U&gt;&gt;&gt;&gt;&gt; as Iterator&gt;::next(move _3)</td></tr></table>>];
    bb3__0_103 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">_8 = discriminant(_2)<br/></td></tr><tr><td align="left">switchInt(move _8)</td></tr></table>>];
    bb4__0_103 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">_9 = move ((_2 as Some).0: &amp;mut std::ptr::NonNull&lt;Node&lt;T, U&gt;&gt;)<br/></td></tr><tr><td align="left">_11 = NonNull::&lt;Node&lt;T, U&gt;&gt;::as_mut::&lt;'_&gt;(_9)</td></tr></table>>];
    bb5__0_103 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">_10 = _11<br/>_12 = &amp;mut ((*_10).0: T)<br/>_0 = Option::&lt;&amp;mut T&gt;::Some(_12)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb6__0_103 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">_0 = Option::&lt;&amp;mut T&gt;::None<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb7__0_103 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_103 -> bb1__0_103 [label="return"];
    bb1__0_103 -> bb2__0_103 [label="return"];
    bb2__0_103 -> bb3__0_103 [label="return"];
    bb3__0_103 -> bb4__0_103 [label="1"];
    bb3__0_103 -> bb6__0_103 [label="otherwise"];
    bb4__0_103 -> bb5__0_103 [label="return"];
    bb5__0_103 -> bb7__0_103 [label=""];
    bb6__0_103 -> bb7__0_103 [label=""];
}
subgraph cluster_Mir_0_109 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn &lt;IterEdges&lt;'a, T, U&gt; as Iterator&gt;::next(_1: &amp;mut IterEdges&lt;'_, T, U&gt;) -&gt; std::option::Option&lt;(&amp;U, &amp;T, &amp;T)&gt;<br align="left"/>let mut _2: std::option::Option&lt;&amp;std::ptr::NonNull&lt;Edge&lt;T, U&gt;&gt;&gt;;<br align="left"/>let mut _3: &amp;mut std::iter::Flatten&lt;&amp;mut std::slice::Iter&lt;'_, std::option::Option&lt;std::ptr::NonNull&lt;Edge&lt;T, U&gt;&gt;&gt;&gt;&gt;;<br align="left"/>let mut _4: std::iter::Flatten&lt;&amp;mut std::slice::Iter&lt;'_, std::option::Option&lt;std::ptr::NonNull&lt;Edge&lt;T, U&gt;&gt;&gt;&gt;&gt;;<br align="left"/>let mut _5: &amp;mut std::slice::Iter&lt;'_, std::option::Option&lt;std::ptr::NonNull&lt;Edge&lt;T, U&gt;&gt;&gt;&gt;;<br align="left"/>let mut _6: &amp;mut std::slice::Iter&lt;'_, std::option::Option&lt;std::ptr::NonNull&lt;Edge&lt;T, U&gt;&gt;&gt;&gt;;<br align="left"/>let mut _7: &amp;mut std::slice::Iter&lt;'_, std::option::Option&lt;std::ptr::NonNull&lt;Edge&lt;T, U&gt;&gt;&gt;&gt;;<br align="left"/>let mut _8: isize;<br align="left"/>let _9: &amp;std::ptr::NonNull&lt;Edge&lt;T, U&gt;&gt;;<br align="left"/>let _10: &amp;Edge&lt;T, U&gt;;<br align="left"/>let mut _11: (std::option::Option&lt;std::ptr::NonNull&lt;Node&lt;T, U&gt;&gt;&gt;, std::option::Option&lt;std::ptr::NonNull&lt;Node&lt;T, U&gt;&gt;&gt;);<br align="left"/>let mut _12: std::option::Option&lt;std::ptr::NonNull&lt;Node&lt;T, U&gt;&gt;&gt;;<br align="left"/>let mut _13: std::option::Option&lt;std::ptr::NonNull&lt;Node&lt;T, U&gt;&gt;&gt;;<br align="left"/>let mut _14: isize;<br align="left"/>let mut _15: isize;<br align="left"/>let _16: std::ptr::NonNull&lt;Node&lt;T, U&gt;&gt;;<br align="left"/>let _17: std::ptr::NonNull&lt;Node&lt;T, U&gt;&gt;;<br align="left"/>let _18: &amp;Node&lt;T, U&gt;;<br align="left"/>let mut _19: &amp;std::ptr::NonNull&lt;Node&lt;T, U&gt;&gt;;<br align="left"/>let _20: &amp;Node&lt;T, U&gt;;<br align="left"/>let mut _21: &amp;std::ptr::NonNull&lt;Node&lt;T, U&gt;&gt;;<br align="left"/>let mut _22: (&amp;U, &amp;T, &amp;T);<br align="left"/>let _23: &amp;U;<br align="left"/>let _24: &amp;T;<br align="left"/>let _25: &amp;T;<br align="left"/>debug self =&gt; _1;<br align="left"/>debug edge_ref =&gt; _9;<br align="left"/>debug edge =&gt; _10;<br align="left"/>debug node_1 =&gt; _16;<br align="left"/>debug node_2 =&gt; _17;<br align="left"/>debug node_1_ref =&gt; _18;<br align="left"/>debug node_2_ref =&gt; _20;<br align="left"/>>;
    bb0__0_109 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">_7 = &amp;mut ((*_1).0: std::slice::Iter&lt;'_, std::option::Option&lt;std::ptr::NonNull&lt;Edge&lt;T, U&gt;&gt;&gt;&gt;)<br/></td></tr><tr><td align="left">_6 = &lt;std::slice::Iter&lt;'_, Option&lt;NonNull&lt;Edge&lt;T, U&gt;&gt;&gt;&gt; as Iterator&gt;::by_ref(move _7)</td></tr></table>>];
    bb1__0_109 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">_5 = _6<br/></td></tr><tr><td align="left">_4 = &lt;&amp;mut std::slice::Iter&lt;'_, Option&lt;NonNull&lt;Edge&lt;T, U&gt;&gt;&gt;&gt; as Iterator&gt;::flatten(move _5)</td></tr></table>>];
    bb2__0_109 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">_3 = &amp;mut _4<br/></td></tr><tr><td align="left">_2 = &lt;Flatten&lt;&amp;mut std::slice::Iter&lt;'_, Option&lt;NonNull&lt;Edge&lt;T, U&gt;&gt;&gt;&gt;&gt; as Iterator&gt;::next(move _3)</td></tr></table>>];
    bb3__0_109 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">_8 = discriminant(_2)<br/></td></tr><tr><td align="left">switchInt(move _8)</td></tr></table>>];
    bb4__0_109 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">_9 = ((_2 as Some).0: &amp;std::ptr::NonNull&lt;Edge&lt;T, U&gt;&gt;)<br/></td></tr><tr><td align="left">_10 = NonNull::&lt;Edge&lt;T, U&gt;&gt;::as_ref::&lt;'_&gt;(_9)</td></tr></table>>];
    bb5__0_109 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">_12 = ((*_10).0: std::option::Option&lt;std::ptr::NonNull&lt;Node&lt;T, U&gt;&gt;&gt;)<br/>_13 = ((*_10).1: std::option::Option&lt;std::ptr::NonNull&lt;Node&lt;T, U&gt;&gt;&gt;)<br/>_11 = (move _12, move _13)<br/>_15 = discriminant((_11.0: std::option::Option&lt;std::ptr::NonNull&lt;Node&lt;T, U&gt;&gt;&gt;))<br/></td></tr><tr><td align="left">switchInt(move _15)</td></tr></table>>];
    bb6__0_109 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">_14 = discriminant((_11.1: std::option::Option&lt;std::ptr::NonNull&lt;Node&lt;T, U&gt;&gt;&gt;))<br/></td></tr><tr><td align="left">switchInt(move _14)</td></tr></table>>];
    bb7__0_109 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">_16 = (((_11.0: std::option::Option&lt;std::ptr::NonNull&lt;Node&lt;T, U&gt;&gt;&gt;) as Some).0: std::ptr::NonNull&lt;Node&lt;T, U&gt;&gt;)<br/>_17 = (((_11.1: std::option::Option&lt;std::ptr::NonNull&lt;Node&lt;T, U&gt;&gt;&gt;) as Some).0: std::ptr::NonNull&lt;Node&lt;T, U&gt;&gt;)<br/>_19 = &amp;_16<br/></td></tr><tr><td align="left">_18 = NonNull::&lt;Node&lt;T, U&gt;&gt;::as_ref::&lt;'_&gt;(move _19)</td></tr></table>>];
    bb8__0_109 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">_21 = &amp;_17<br/></td></tr><tr><td align="left">_20 = NonNull::&lt;Node&lt;T, U&gt;&gt;::as_ref::&lt;'_&gt;(move _21)</td></tr></table>>];
    bb9__0_109 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">_23 = &amp;((*_10).2: U)<br/>_24 = &amp;((*_18).0: T)<br/>_25 = &amp;((*_20).0: T)<br/>_22 = (_23, _24, _25)<br/>_0 = Option::&lt;(&amp;U, &amp;T, &amp;T)&gt;::Some(move _22)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb10__0_109 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">_0 = Option::&lt;(&amp;U, &amp;T, &amp;T)&gt;::None<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb11__0_109 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_109 -> bb1__0_109 [label="return"];
    bb1__0_109 -> bb2__0_109 [label="return"];
    bb2__0_109 -> bb3__0_109 [label="return"];
    bb3__0_109 -> bb4__0_109 [label="1"];
    bb3__0_109 -> bb10__0_109 [label="otherwise"];
    bb4__0_109 -> bb5__0_109 [label="return"];
    bb5__0_109 -> bb6__0_109 [label="1"];
    bb5__0_109 -> bb10__0_109 [label="otherwise"];
    bb6__0_109 -> bb7__0_109 [label="1"];
    bb6__0_109 -> bb10__0_109 [label="otherwise"];
    bb7__0_109 -> bb8__0_109 [label="return"];
    bb8__0_109 -> bb9__0_109 [label="return"];
    bb9__0_109 -> bb11__0_109 [label=""];
    bb10__0_109 -> bb11__0_109 [label=""];
}
subgraph cluster_Mir_0_115 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn &lt;IterMutEdges&lt;'a, T, U&gt; as Iterator&gt;::next(_1: &amp;mut IterMutEdges&lt;'_, T, U&gt;) -&gt; std::option::Option&lt;(&amp;mut T, &amp;mut T, &amp;mut U)&gt;<br align="left"/>let mut _2: std::option::Option&lt;&amp;mut std::ptr::NonNull&lt;Edge&lt;T, U&gt;&gt;&gt;;<br align="left"/>let mut _3: &amp;mut std::iter::Flatten&lt;&amp;mut std::slice::IterMut&lt;'_, std::option::Option&lt;std::ptr::NonNull&lt;Edge&lt;T, U&gt;&gt;&gt;&gt;&gt;;<br align="left"/>let mut _4: std::iter::Flatten&lt;&amp;mut std::slice::IterMut&lt;'_, std::option::Option&lt;std::ptr::NonNull&lt;Edge&lt;T, U&gt;&gt;&gt;&gt;&gt;;<br align="left"/>let mut _5: &amp;mut std::slice::IterMut&lt;'_, std::option::Option&lt;std::ptr::NonNull&lt;Edge&lt;T, U&gt;&gt;&gt;&gt;;<br align="left"/>let mut _6: &amp;mut std::slice::IterMut&lt;'_, std::option::Option&lt;std::ptr::NonNull&lt;Edge&lt;T, U&gt;&gt;&gt;&gt;;<br align="left"/>let mut _7: &amp;mut std::slice::IterMut&lt;'_, std::option::Option&lt;std::ptr::NonNull&lt;Edge&lt;T, U&gt;&gt;&gt;&gt;;<br align="left"/>let mut _8: isize;<br align="left"/>let _9: &amp;mut std::ptr::NonNull&lt;Edge&lt;T, U&gt;&gt;;<br align="left"/>let _10: &amp;mut Edge&lt;T, U&gt;;<br align="left"/>let mut _11: &amp;mut Edge&lt;T, U&gt;;<br align="left"/>let mut _12: (std::option::Option&lt;std::ptr::NonNull&lt;Node&lt;T, U&gt;&gt;&gt;, std::option::Option&lt;std::ptr::NonNull&lt;Node&lt;T, U&gt;&gt;&gt;);<br align="left"/>let mut _13: std::option::Option&lt;std::ptr::NonNull&lt;Node&lt;T, U&gt;&gt;&gt;;<br align="left"/>let mut _14: std::option::Option&lt;std::ptr::NonNull&lt;Node&lt;T, U&gt;&gt;&gt;;<br align="left"/>let mut _15: isize;<br align="left"/>let mut _16: isize;<br align="left"/>let mut _17: std::ptr::NonNull&lt;Node&lt;T, U&gt;&gt;;<br align="left"/>let mut _18: std::ptr::NonNull&lt;Node&lt;T, U&gt;&gt;;<br align="left"/>let _19: &amp;mut Node&lt;T, U&gt;;<br align="left"/>let mut _20: &amp;mut Node&lt;T, U&gt;;<br align="left"/>let mut _21: &amp;mut std::ptr::NonNull&lt;Node&lt;T, U&gt;&gt;;<br align="left"/>let _22: &amp;mut Node&lt;T, U&gt;;<br align="left"/>let mut _23: &amp;mut Node&lt;T, U&gt;;<br align="left"/>let mut _24: &amp;mut std::ptr::NonNull&lt;Node&lt;T, U&gt;&gt;;<br align="left"/>let mut _25: (&amp;mut T, &amp;mut T, &amp;mut U);<br align="left"/>let mut _26: &amp;mut T;<br align="left"/>let mut _27: &amp;mut T;<br align="left"/>let mut _28: &amp;mut U;<br align="left"/>debug self =&gt; _1;<br align="left"/>debug edge_ref =&gt; _9;<br align="left"/>debug edge =&gt; _10;<br align="left"/>debug node_1 =&gt; _17;<br align="left"/>debug node_2 =&gt; _18;<br align="left"/>debug node_1_ref =&gt; _19;<br align="left"/>debug node_2_ref =&gt; _22;<br align="left"/>>;
    bb0__0_115 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">_7 = &amp;mut ((*_1).0: std::slice::IterMut&lt;'_, std::option::Option&lt;std::ptr::NonNull&lt;Edge&lt;T, U&gt;&gt;&gt;&gt;)<br/></td></tr><tr><td align="left">_6 = &lt;std::slice::IterMut&lt;'_, Option&lt;NonNull&lt;Edge&lt;T, U&gt;&gt;&gt;&gt; as Iterator&gt;::by_ref(move _7)</td></tr></table>>];
    bb1__0_115 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">_5 = _6<br/></td></tr><tr><td align="left">_4 = &lt;&amp;mut std::slice::IterMut&lt;'_, Option&lt;NonNull&lt;Edge&lt;T, U&gt;&gt;&gt;&gt; as Iterator&gt;::flatten(move _5)</td></tr></table>>];
    bb2__0_115 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">_3 = &amp;mut _4<br/></td></tr><tr><td align="left">_2 = &lt;Flatten&lt;&amp;mut std::slice::IterMut&lt;'_, Option&lt;NonNull&lt;Edge&lt;T, U&gt;&gt;&gt;&gt;&gt; as Iterator&gt;::next(move _3)</td></tr></table>>];
    bb3__0_115 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">_8 = discriminant(_2)<br/></td></tr><tr><td align="left">switchInt(move _8)</td></tr></table>>];
    bb4__0_115 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">_9 = move ((_2 as Some).0: &amp;mut std::ptr::NonNull&lt;Edge&lt;T, U&gt;&gt;)<br/></td></tr><tr><td align="left">_11 = NonNull::&lt;Edge&lt;T, U&gt;&gt;::as_mut::&lt;'_&gt;(_9)</td></tr></table>>];
    bb5__0_115 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">_10 = _11<br/>_13 = ((*_10).0: std::option::Option&lt;std::ptr::NonNull&lt;Node&lt;T, U&gt;&gt;&gt;)<br/>_14 = ((*_10).1: std::option::Option&lt;std::ptr::NonNull&lt;Node&lt;T, U&gt;&gt;&gt;)<br/>_12 = (move _13, move _14)<br/>_16 = discriminant((_12.0: std::option::Option&lt;std::ptr::NonNull&lt;Node&lt;T, U&gt;&gt;&gt;))<br/></td></tr><tr><td align="left">switchInt(move _16)</td></tr></table>>];
    bb6__0_115 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">_15 = discriminant((_12.1: std::option::Option&lt;std::ptr::NonNull&lt;Node&lt;T, U&gt;&gt;&gt;))<br/></td></tr><tr><td align="left">switchInt(move _15)</td></tr></table>>];
    bb7__0_115 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">_17 = (((_12.0: std::option::Option&lt;std::ptr::NonNull&lt;Node&lt;T, U&gt;&gt;&gt;) as Some).0: std::ptr::NonNull&lt;Node&lt;T, U&gt;&gt;)<br/>_18 = (((_12.1: std::option::Option&lt;std::ptr::NonNull&lt;Node&lt;T, U&gt;&gt;&gt;) as Some).0: std::ptr::NonNull&lt;Node&lt;T, U&gt;&gt;)<br/>_21 = &amp;mut _17<br/></td></tr><tr><td align="left">_20 = NonNull::&lt;Node&lt;T, U&gt;&gt;::as_mut::&lt;'_&gt;(move _21)</td></tr></table>>];
    bb8__0_115 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">_19 = _20<br/>_24 = &amp;mut _18<br/></td></tr><tr><td align="left">_23 = NonNull::&lt;Node&lt;T, U&gt;&gt;::as_mut::&lt;'_&gt;(move _24)</td></tr></table>>];
    bb9__0_115 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">_22 = _23<br/>_26 = &amp;mut ((*_19).0: T)<br/>_27 = &amp;mut ((*_22).0: T)<br/>_28 = &amp;mut ((*_10).2: U)<br/>_25 = (_26, _27, _28)<br/>_0 = Option::&lt;(&amp;mut T, &amp;mut T, &amp;mut U)&gt;::Some(move _25)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb10__0_115 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">_0 = Option::&lt;(&amp;mut T, &amp;mut T, &amp;mut U)&gt;::None<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb11__0_115 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_115 -> bb1__0_115 [label="return"];
    bb1__0_115 -> bb2__0_115 [label="return"];
    bb2__0_115 -> bb3__0_115 [label="return"];
    bb3__0_115 -> bb4__0_115 [label="1"];
    bb3__0_115 -> bb10__0_115 [label="otherwise"];
    bb4__0_115 -> bb5__0_115 [label="return"];
    bb5__0_115 -> bb6__0_115 [label="1"];
    bb5__0_115 -> bb10__0_115 [label="otherwise"];
    bb6__0_115 -> bb7__0_115 [label="1"];
    bb6__0_115 -> bb10__0_115 [label="otherwise"];
    bb7__0_115 -> bb8__0_115 [label="return"];
    bb8__0_115 -> bb9__0_115 [label="return"];
    bb9__0_115 -> bb11__0_115 [label=""];
    bb10__0_115 -> bb11__0_115 [label=""];
}
subgraph cluster_Mir_0_122 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn &lt;EdgeError as Debug&gt;::fmt(_1: &amp;EdgeError, _2: &amp;mut std::fmt::Formatter&lt;'_&gt;) -&gt; std::result::Result&lt;(), std::fmt::Error&gt;<br align="left"/>let mut _3: &amp;str;<br align="left"/>let mut _4: isize;<br align="left"/>let _5: &amp;str;<br align="left"/>let _6: &amp;str;<br align="left"/>debug self =&gt; _1;<br align="left"/>debug f =&gt; _2;<br align="left"/>>;
    bb0__0_122 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">_4 = discriminant((*_1))<br/></td></tr><tr><td align="left">switchInt(move _4)</td></tr></table>>];
    bb1__0_122 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">_6 = const &quot;SameNode&quot;<br/>_3 = _6<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb2__0_122 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb3__0_122 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">_5 = const &quot;NodeOutOfRange&quot;<br/>_3 = _5<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb4__0_122 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left">_0 = Formatter::&lt;'_&gt;::write_str(_2, move _3)</td></tr></table>>];
    bb5__0_122 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_122 -> bb3__0_122 [label="0"];
    bb0__0_122 -> bb1__0_122 [label="1"];
    bb0__0_122 -> bb2__0_122 [label="otherwise"];
    bb1__0_122 -> bb4__0_122 [label=""];
    bb3__0_122 -> bb4__0_122 [label=""];
    bb4__0_122 -> bb5__0_122 [label="return"];
}
subgraph cluster_Mir_0_124 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn &lt;EdgeError as Clone&gt;::clone(_1: &amp;EdgeError) -&gt; EdgeError<br align="left"/>let mut _2: isize;<br align="left"/>debug self =&gt; _1;<br align="left"/>>;
    bb0__0_124 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">_2 = discriminant((*_1))<br/></td></tr><tr><td align="left">switchInt(move _2)</td></tr></table>>];
    bb1__0_124 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">_0 = EdgeError::SameNode<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb2__0_124 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb3__0_124 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">_0 = EdgeError::NodeOutOfRange<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb4__0_124 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_124 -> bb3__0_124 [label="0"];
    bb0__0_124 -> bb1__0_124 [label="1"];
    bb0__0_124 -> bb2__0_124 [label="otherwise"];
    bb1__0_124 -> bb4__0_124 [label=""];
    bb3__0_124 -> bb4__0_124 [label=""];
}
subgraph cluster_Mir_0_35 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn IterNodesEdge(_1: IterNodes&lt;'_, T, U&gt;) -&gt; IterNodesEdge&lt;'_, T, U&gt;<br align="left"/>>;
    bb0__0_35 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">_0 = IterNodesEdge::&lt;'_, T, U&gt;(move _1)<br/></td></tr><tr><td align="left">return</td></tr></table>>];
}
subgraph cluster_Mir_0_35 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn IterNodesEdge(_1: IterNodes&lt;'_, T, U&gt;) -&gt; IterNodesEdge&lt;'_, T, U&gt;<br align="left"/>>;
    bb0__0_35 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">_0 = IterNodesEdge::&lt;'_, T, U&gt;(move _1)<br/></td></tr><tr><td align="left">return</td></tr></table>>];
}
}
